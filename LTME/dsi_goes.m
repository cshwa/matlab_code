function dsi_goes(varargin)
% DataSetInventory and Interface for the GOES 
%
% Meri Sheremet
% March 2009

% DataSetBranch=function of (TAvg)
List.TAvg={
'1day';
'3day';
'8day';
'14day';
'1month';
};

if nargin < 1 
List.DataSetBranch={    
%Satellite_TimeMode_SpatialCoverage
'GOES_1day';
'GOES_3day';
'GOES_8day';
'GOES_14day';
'GOES_1month';
};
    
    for k=1:length(List.DataSetBranch)
    disp(['DSI_' List.DataSetBranch{k} ])
    eval(['DSI_' List.DataSetBranch{k} ';'])
    end

    dsi_filename = 'dsi_goes.mat';
%    if (~isdeployed)
        pname = mfilename('fullpath');
        pname = pname(1:length(pname) - length(mfilename));
        dsi_filename = [pname,dsi_filename];
%    end
    
    if ~exist(dsi_filename,'file')
        save(dsi_filename,'List')
    else
        save(dsi_filename,'List','-append')
    end

elseif nargin > 1
    disp('Incorrect number of arguments.'); return  
else
% with one argument for the specified DataSetBranch only     
eval(varargin{1}); 
end

% a general request employed by get_DataSet program has the following pattern
% loaddap([URLSITE URLPATH URLFILE '?' URLCVAR URLCTIME URLCLAT URLCLON URLCDEPTH])
% constraints URLCTIME URLCLAT URLCLON URLCDEPTH can be in different order
% constraints URLCLAT URLCLON URLCDEPTH will be generated by program get

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%>> A=loaddap('-A','http://thredds1.pfeg.noaa.gov:8080/thredds/dodsC/satellite/GA/ssta/1day?GAssta')
%
%A = 
%
%               GAssta: [1x1 struct]
%    Global_Attributes: [1x1 struct]
%>> A.GAssta
%
%ans = 
%
%           ml__FillValue: -9999999
%            actual_range: [2x1 double]
%                coordsys: '"geographic"'
%         fraction_digits: 1
%               long_name: [1x72 char]
%           missing_value: -9999999
%    numberOfObservations: 3239630
%         percentCoverage: 0.5142
%           standard_name: '"sea_surface_temperature"'
%                   units: '"degree_C"'
%       DODS_ML_Real_Name: 'GAssta'
%                  GAssta: [1x1 struct]
%                    time: [1x1 struct]
%                altitude: [1x1 struct]
%                     lat: [1x1 struct]
%                     lon: [1x1 struct]


function DSI=DSI_GOES_1day 
DSI.DataSetName='GOES';
DSI.DataSetBranch='GOES_1day';
DSI.TAvg='1day';
DSI=DSI_common2(DSI); 
function DSI=DSI_GOES_3day 
DSI.DataSetName='GOES';
DSI.DataSetBranch='GOES_3day';
DSI.TAvg='3day';
DSI=DSI_common2(DSI); 
function DSI=DSI_GOES_8day 
DSI.DataSetName='GOES';
DSI.DataSetBranch='GOES_8day';
DSI.TAvg='8day';
DSI=DSI_common2(DSI); 
function DSI=DSI_GOES_14day 
DSI.DataSetName='GOES';
DSI.DataSetBranch='GOES_14day';
DSI.TAvg='14day';
DSI=DSI_common2(DSI); 
function DSI=DSI_GOES_1month 
DSI.DataSetName='GOES';
DSI.DataSetBranch='GOES_1month';
DSI.TAvg='1month';
DSI=DSI_common2(DSI); 
 
function DSI=DSI_common2(DSI); 
DSI.URLSITE='http://thredds1.pfeg.noaa.gov:8080';
DSI.URLPATH='/thredds/dodsC/satellite/GA/ssta/';
DSI.URLFILE=DSI.TAvg;
if strcmp(DSI.TAvg,'1month') DSI.URLFILE='mday'; end
% define list of fields or variables available in the dataset
LaLo={'latitude','longitude'};
TLaLo={'time','latitude','longitude'};
FieldsTable={
%    opendap name, long name, name in dataset, returned name, menu name, opendap
%    coord, dataset coord, CBNum, units
'sst','sea_surface_temperature','GAssta','GAssta.GAssta','Sea Surface Temperature (SST)',LaLo,TLaLo,1,'degree_C';
};
DSI.Fields         =FieldsTable(:,1); 
DSI.Fields_NameDS  =FieldsTable(:,3);
DSI.Fields_NameReturned=FieldsTable(:,4);
DSI.Fields_NameMenu=FieldsTable(:,5);
DSI.Fields_Coord   =FieldsTable(:,6);
DSI.Fields_CoordDS =FieldsTable(:,7);
DSI.Fields_CBNum   =FieldsTable(:,8);

CoordinatesTable={
'latitude','latitude','degrees_north';
'longitude','longitude','degrees_east';
%'depth','depth','m';
'time','time','days since 0000-01-01 00:00:00';
};

for k=1:length(DSI.Fields)
    FIELD=DSI.Fields{k};
eval(['DSI.URLCVAR.' FIELD '=DSI.Fields_NameDS{k};']);
end

% get available lat,lon,time 
%loaddap('http://thredds1.pfeg.noaa.gov:8080/thredds/dodsC/satellite/GA/ssta/1day?time')
URL=[DSI.URLSITE DSI.URLPATH DSI.URLFILE '?lat,lon,time'];
loaddap(['+v','-e'],URL);
%dods_err = 0 means no error.
%dods_err = 1 means error.
%dods_err_msg [variable where error message is stored]
if dods_err
    disp(dods_err_msg)
    msgbox('Could not access dataset site. Sorry, try again later.');
    return
end

%units: '"seconds since 1970-01-01"'
t0=datenum('1970-01-01 00:00:00','yyyy-mm-dd HH:MM:SS'); 
t=time/(24*60*60)+t0; % in datenum days since '0000-01-01 00:00:00'
DSI.Time=t;
%dt=median(diff(t));
%DSI.dTime=dt;
%DSI.TimeA=t-0.5*dt;
%DSI.TimeB=t+0.5*dt;
DSI.Latitude=lat;
DSI.Longitude=lon;

DSI.Coordinates=CoordinatesTable(:,1);
DSI.Dimensions.latitude=length(DSI.Latitude);
DSI.Dimensions.longitude=length(DSI.Longitude);
%DSI.Dimensions.depth=length(DSI.Depth);
DSI.Dimensions.time=length(DSI.Time);
for k=1:length(DSI.Fields)
    FIELD=DSI.Fields{k};
eval(['DSI.Variables.' FIELD '=DSI.Fields_Coord{k};'])
end
DSI.Variables.latitude={'latitude'};
DSI.Variables.longitude={'longitude'};
DSI.Variables.depth={'depth'};
DSI.Variables.time={'time'};

for k=1:length(DSI.Fields)
    FIELD=DSI.Fields{k};
eval(['DSI.Attributes.' FIELD '.long_name=FieldsTable{k,2};']);
eval(['DSI.Attributes.' FIELD '.units    =FieldsTable{k,9};']);
end
for k=1:length(DSI.Coordinates)
    COORD=DSI.Coordinates{k};
eval(['DSI.Attributes.' COORD '.long_name=CoordinatesTable{k,2};']);
eval(['DSI.Attributes.' COORD '.units    =CoordinatesTable{k,3};']);
end

% Rename returned variables and change dimensions order
for k=1:length(DSI.Fields)
    FIELD=DSI.Fields{k};
    FREN=['f=squeeze(' DSI.Fields_NameReturned{k} ');'];
eval(['DSI.FormulaRen.' FIELD '=''' FREN ''';']);      
end
% ml_FillValue: -9999999,-1.e30
DSI.FormulaNaN='f(find(f<-9999998))=NaN;';
%DSI.FormulaOrderCoord='f=f'';';
%DSI.FormulaCnv='';

%DSI.Range.Time1=min(DSI.TimeA);
%DSI.Range.Time2=max(DSI.TimeB);
DSI.Range.Time1=min(DSI.Time);
DSI.Range.Time2=max(DSI.Time);
DSI.Range.Latitude1=min(DSI.Latitude);
DSI.Range.Latitude2=max(DSI.Latitude);
DSI.Range.Longitude1=min(DSI.Longitude);
DSI.Range.Longitude2=max(DSI.Longitude);

DSI.Attributes.latitude.units='degrees_north';
DSI.Attributes.latitude.valid_range=[min(DSI.Latitude) max(DSI.Latitude)];
DSI.Attributes.longitude.units='degrees_east';
DSI.Attributes.longitude.valid_range=[min(DSI.Longitude) max(DSI.Longitude)];
%DSI.Attributes.depth.units='m';
%DSI.Attributes.depth.valid_range=[min(DSI.Depth) max(DSI.Depth)];

S1=['time in seconds since 1970-01-01 00:00:00'];
S2=['missing values replaced with NaN'];
%S3=['variables converted to physical units;'];
DSI.Readme=[S1 '/' S2 ];

eval(['DSI_' DSI.DataSetBranch '=DSI;'])

dsi_filename = 'dsi_goes.mat';
%if (~isdeployed)
    pname = mfilename('fullpath');
    pname = pname(1:length(pname) - length(mfilename));
    dsi_filename = [pname,dsi_filename];
%end

if ~exist(dsi_filename,'file')
save(dsi_filename,['DSI_' DSI.DataSetBranch])
end
save(dsi_filename,['DSI_' DSI.DataSetBranch],'-append')



