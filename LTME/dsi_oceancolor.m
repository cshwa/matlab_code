function dsi_oceancolor(varargin)
% updates the DataSetInventory structures
% without arguments for all the following DataSetBranches
if nargin < 1 
DSI_OceanColor_CZCS_9km_8day_hdf              
DSI_OceanColor_CZCS_9km_monthly_hdf            
DSI_OceanColor_MODIS_4km_3day_hdf               
DSI_OceanColor_MODIS_4km_8day_hdf
DSI_OceanColor_MODIS_9km_3day_hdf 
DSI_OceanColor_MODIS_9km_8day_hdf               
DSI_OceanColor_MergedMODISSeaWiFS_9km_1day_hdf  
DSI_OceanColor_MergedMODISSeaWiFS_9km_8day_hdf  
%DSI_OceanColor_SeaWiFS_9km_8day_hdf             
elseif nargin > 1
disp('Incorrect number of arguments.'); return  
else
% with one argument for the specified DataSetBranch only     
eval(varargin{1}); 
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function DSI=DSI_OceanColor_CZCS_9km_8day_hdf 
% create DataSetInventory of Ocean Color CZCS 
DSI.DataSetName='OceanColor';
DSI.DataSetBranch='OceanColor_CZCS_9km_8day_hdf';

% a general request employed by get_DataSet program has the following pattern
% loaddap([URLSITE URLPATH URLFILE '?' URLCVAR URLCTIME URLCLAT URLCLON URLCDEPTH])
%   constraints URLCTIME URLCLAT URLCLON URLCDEPTH can be in different order
%   constraints URLCLAT URLCLON URLCDEPTH will be generated by program get

% Examples of files in the dataset
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/czcs/global/8_day/hdf/
%C19790011979008.L3m_8D_CHLO_9.hdf?l3m_data[0:1:2159][0:1:4319]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/czcs/global/8_day/hdf/
%C19790011979008.L3m_8D_L550_9.hdf?l3m_data[0:1:2159][0:1:4319]

% define list of fields or variables available in the dataset
% enter field names in rows; 
% columns reserved for defining alternative names and other properties associated with fields
% column 1 field name in opendap, column 2 variable name in dataset
LaLo={'latitude','longitude'};
DSI.FieldsTable={
'Chlor'     ,'l3m_data',LaLo,101,'mg m^-3\\000';
'L550'      ,'l3m_data',LaLo,102,'mW cm^-2 um^-1 sr^-1\\000';
};
DSI.Fields              =DSI.FieldsTable(:,1);
DSI.Fields_NameDS       =DSI.FieldsTable(:,2);
DSI.Fields_NameReturned =DSI.FieldsTable(:,2);
DSI.Fields_NameLong     =DSI.FieldsTable(:,1);
DSI.Fields_NameMenu     =DSI.FieldsTable(:,1);
DSI.Fields_Coord        =DSI.FieldsTable(:,3);
DSI.Fields_CoordDS      =DSI.FieldsTable(:,3);
DSI.Fields_CBNum        =DSI.FieldsTable(:,4);
DSI.Fields_Units        =DSI.FieldsTable(:,5);

% Replace missing values with NaN
DSI.FormulaNaN.Chlor='f(find(f==255))=NaN;';
DSI.FormulaNaN.L550 ='f(find(f==255))=NaN;';

% Convert to physical units
DSI.FormulaCnv.Chlor='f=A.Global_Attributes.HDF_GLOBAL.Base.^(A.Global_Attributes.HDF_GLOBAL.Slope*f+A.Global_Attributes.HDF_GLOBAL.Intercept);';
DSI.FormulaCnv.L550 ='f=A.Global_Attributes.HDF_GLOBAL.Slope*f + A.Global_Attributes.HDF_GLOBAL.Intercept;';

% url location of the dataset files
DSI.URLSITE='http://www.marine.csiro.au';
DSI.URLPATH='/dods/nph-dods/dods-data/ocean_colour/czcs/global/8_day/hdf/';

% obtain list of files with extention 'hdf'
%FNList=htmldirlist(URL,EXT)
FNList=htmldirlist([DSI.URLSITE DSI.URLPATH],'hdf'); 

% exctract the list of files corresponding to each field or variable
% note that string 8D_ is required otherwise SST_4 will match NSST_4 as well
DSI.URLFILE.Chlor       =FNList(find(cellfun(@isempty,strfind(FNList,'8D_CHLO_9.hdf'))==0));
DSI.URLFILE.L550        =FNList(find(cellfun(@isempty,strfind(FNList,'8D_L550_9.hdf'))==0));

DSI.URLCTIME=''; % empty not used in this dataset
DSI.URLCDEPTH=''; % empty not used in this dataset

% browse through list of fields and obtain array of available times for each field
for kf=1:length(DSI.FieldsTable(:,1)) 
FIELD=DSI.FieldsTable{kf,1};    
eval(['FNList=DSI.URLFILE.' FIELD ';'])
CVAR=DSI.FieldsTable{kf,2};
eval(['DSI.URLCVAR.' FIELD '=''' CVAR ''';']) 

% define empty arrays
eval(['DSI.Time.'  FIELD '=[];'])    % double array: center of time interval
eval(['DSI.TimeA.' FIELD '=[];'])    % double array: beginning of time interval
eval(['DSI.TimeB.' FIELD '=[];'])    % double array: end of time interval
    for kt=1:length(FNList)
        
%C19790011979008.L3m_8D_CHLO_9.hdf?l3m_data[0:1:2159][0:1:4319]
FN=FNList{kt};
%tA=datenum(FN(2:8),'yyyyddd');
%tB=datenum(FN(9:15),'yyyyddd')+1;
tA=datenum(str2num(FN(2:5)),01,str2num(FN(6:8)));
tB=datenum(str2num(FN(9:12)),01,str2num(FN(13:15)))+1;
t=(tA+tB)*0.5;
eval(['DSI.TimeA.' FIELD '(end+1)=tA;'])
eval(['DSI.TimeB.' FIELD '(end+1)=tB;'])
eval(['DSI.Time.'  FIELD '(end+1)=t;' ])
    end %kt
end %kf

DSI=merge_time_arrays(DSI);

NY=2160;NX=4320;
DSI.Latitude =  90-((1:1:NY)-0.5)'/NY*180;
DSI.Longitude=-180+((1:1:NX)-0.5)'/NX*360;
DSI=DSI_common2(DSI);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function DSI=DSI_OceanColor_CZCS_9km_monthly_hdf 
% create DataSetInventory of Ocean Color CZCS 
DSI.DataSetName='OceanColor';
DSI.DataSetBranch='OceanColor_CZCS_9km_monthly_hdf';

% a general request employed by get_DataSet program has the following pattern
% loaddap([URLSITE URLPATH URLFILE '?' URLCVAR URLCTIME URLCLAT URLCLON URLCDEPTH])
%   constraints URLCTIME URLCLAT URLCLON URLCDEPTH can be in different order
%   constraints URLCLAT URLCLON URLCDEPTH will be generated by program get

% Examples of files in the dataset
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/czcs/global/monthly/hdf/
%C19800011980031.L3m_MO_CHLO_9.hdf?l3m_data[0:1:2159][0:1:4319]

% define list of fields or variables available in the dataset
% enter field names in rows; 
% columns reserved for defining alternative names and other properties associated with fields
% column 1 field name in opendap, column 2 variable name in dataset
LaLo={'latitude','longitude'};
DSI.FieldsTable={
'Chlor'     ,'l3m_data',LaLo,101,'mg m^-3\\000';
};
DSI.Fields              =DSI.FieldsTable(:,1);
DSI.Fields_NameDS       =DSI.FieldsTable(:,2);
DSI.Fields_NameReturned =DSI.FieldsTable(:,2);
DSI.Fields_NameLong     =DSI.FieldsTable(:,1);
DSI.Fields_NameMenu     =DSI.FieldsTable(:,1);
DSI.Fields_Coord        =DSI.FieldsTable(:,3);
DSI.Fields_CoordDS      =DSI.FieldsTable(:,3);
DSI.Fields_CBNum        =DSI.FieldsTable(:,4);
DSI.Fields_Units        =DSI.FieldsTable(:,5);

% Replace missing values with NaN
DSI.FormulaNaN.Chlor='f(find(f==255))=NaN;';

% Convert to physical units
DSI.FormulaCnv.Chlor='f=A.Global_Attributes.HDF_GLOBAL.Base.^(A.Global_Attributes.HDF_GLOBAL.Slope*f+A.Global_Attributes.HDF_GLOBAL.Intercept);';

% url location of the dataset files
DSI.URLSITE='http://www.marine.csiro.au';
DSI.URLPATH='/dods/nph-dods/dods-data/ocean_colour/czcs/global/monthly/hdf/';

% obtain list of files with extention 'hdf'
%FNList=htmldirlist(URL,EXT)
FNList=htmldirlist([DSI.URLSITE DSI.URLPATH],'hdf'); 

% exctract the list of files corresponding to each field or variable
% note that string 8D_ is required otherwise SST_4 will match NSST_4 as well
DSI.URLFILE.Chlor       =FNList(find(cellfun(@isempty,strfind(FNList,'MO_CHLO_9.hdf'))==0));

DSI.URLCTIME=''; % empty not used in this dataset
DSI.URLCDEPTH=''; % empty not used in this dataset

% browse through list of fields and obtain array of available times for each field
for kf=1:length(DSI.FieldsTable(:,1)) 
FIELD=DSI.FieldsTable{kf,1};    
eval(['FNList=DSI.URLFILE.' FIELD ';'])
CVAR=DSI.FieldsTable{kf,2};
eval(['DSI.URLCVAR.' FIELD '=''' CVAR ''';']) 

% define empty arrays
eval(['DSI.Time.'  FIELD '=[];'])    % double array: center of time interval
eval(['DSI.TimeA.' FIELD '=[];'])    % double array: beginning of time interval
eval(['DSI.TimeB.' FIELD '=[];'])    % double array: end of time interval
    for kt=1:length(FNList)
        
%C19800011980031.L3m_MO_CHLO_9.hdf?l3m_data[0:1:2159][0:1:4319]
FN=FNList{kt};
%tA=datenum(FN(2:8),'yyyyddd');
%tB=datenum(FN(9:15),'yyyyddd')+1;
tA=datenum(str2num(FN(2:5)),01,str2num(FN(6:8)));
tB=datenum(str2num(FN(9:12)),01,str2num(FN(13:15)))+1;
t=(tA+tB)*0.5;
eval(['DSI.TimeA.' FIELD '(end+1)=tA;'])
eval(['DSI.TimeB.' FIELD '(end+1)=tB;'])
eval(['DSI.Time.'  FIELD '(end+1)=t;' ])
    end %kt
end %kf

DSI=merge_time_arrays(DSI);
NY=2160;NX=4320;
DSI.Latitude =  90-((1:1:NY)-0.5)'/NY*180;
DSI.Longitude=-180+((1:1:NX)-0.5)'/NX*360;
DSI=DSI_common2(DSI);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function DSI=DSI_OceanColor_MODIS_4km_3day_hdf 
% create DataSetInventory of Ocean Color MODIS 
DSI.DataSetName='OceanColor';
DSI.DataSetBranch='OceanColor_MODIS_4km_3day_hdf';

% a general request employed by get_DataSet program has the following pattern
% loaddap([URLSITE URLPATH URLFILE '?' URLCVAR URLCTIME URLCLAT URLCLON URLCDEPTH])
%   constraints URLCTIME URLCLAT URLCLON URLCDEPTH can be in different order
%   constraints URLCLAT URLCLON URLCDEPTH will be generated by program get

% Examples of files in the dataset
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/3_day/hdf/
%A20070012007003.L3m_3D_CHLO_4.hdf?l3m_data[0:1:4319][0:1:8639]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/3_day/hdf/
%A20070012007003.L3m_3D_SST_4.hdf?l3m_data[0:1:4319][0:1:8639],l3m_qual[0:1:4319][0:1:8639]

% define list of fields or variables available in the dataset
% enter field names in rows; 
% columns reserved for defining alternative names and other properties associated with fields
% column 1 field name in opendap, column 2 variable name in dataset
LaLo={'latitude','longitude'};
DSI.FieldsTable={
'Chlor'     ,'l3m_data',LaLo,101,'mg m^-3\\000';
'SST'       ,'l3m_data',LaLo,102,'deg-C\\000';
'SST_qual'  ,'l3m_qual',LaLo,103,'deg-C\\000';
};
DSI.Fields              =DSI.FieldsTable(:,1);
DSI.Fields_NameDS       =DSI.FieldsTable(:,2);
DSI.Fields_NameReturned =DSI.FieldsTable(:,2);
DSI.Fields_NameLong     =DSI.FieldsTable(:,1);
DSI.Fields_NameMenu     =DSI.FieldsTable(:,1);
DSI.Fields_Coord        =DSI.FieldsTable(:,3);
DSI.Fields_CoordDS      =DSI.FieldsTable(:,3);
DSI.Fields_CBNum        =DSI.FieldsTable(:,4);
DSI.Fields_Units        =DSI.FieldsTable(:,5);

% Replace missing values with NaN
DSI.FormulaNaN.Chlor='f(find(f==255))=NaN;';
DSI.FormulaNaN.SST ='f(find(f==65535))=NaN;';
DSI.FormulaNaN.SST_qual ='f(find(f==255))=NaN;';

% Convert to physical units
DSI.FormulaCnv.Chlor='f=A.Global_Attributes.HDF_GLOBAL.Base.^(A.Global_Attributes.HDF_GLOBAL.Slope*f+A.Global_Attributes.HDF_GLOBAL.Intercept);';
DSI.FormulaCnv.SST ='f=A.Global_Attributes.HDF_GLOBAL.Slope*f + A.Global_Attributes.HDF_GLOBAL.Intercept;';
DSI.FormulaCnv.SST_qual ='';

% url location of the dataset files
DSI.URLSITE='http://www.marine.csiro.au';
DSI.URLPATH='/dods/nph-dods/dods-data/ocean_colour/modis/global/3_day/hdf/';

%FNList=htmldirlist(URL,EXT)
FNList=htmldirlist([DSI.URLSITE DSI.URLPATH],'hdf'); % list of files with extention 'hdf'

% exctract the list of files corresponding to each field or variable
% note that string 8D_ is required otherwise SST_4 will match NSST_4 as well
DSI.URLFILE.Chlor       =FNList(find(cellfun(@isempty,strfind(FNList,'3D_CHLO_4.hdf'))==0));
DSI.URLFILE.SST         =FNList(find(cellfun(@isempty,strfind(FNList,'3D_SST_4.hdf' ))==0));
DSI.URLFILE.SST_qual    =FNList(find(cellfun(@isempty,strfind(FNList,'3D_SST_4.hdf' ))==0));

DSI.URLCTIME=''; % empty not used in this dataset
DSI.URLCDEPTH=''; % empty not used in this dataset

% browse through list of fields and obtain array of available times for each field
for kf=1:length(DSI.FieldsTable(:,1)) 
FIELD=DSI.FieldsTable{kf,1};    
eval(['FNList=DSI.URLFILE.' FIELD ';'])
CVAR=DSI.FieldsTable{kf,2};
eval(['DSI.URLCVAR.' FIELD '=''' CVAR ''';']) 

% define empty arrays
eval(['DSI.Time.'  FIELD '=[];'])    % double array: center of time interval
eval(['DSI.TimeA.' FIELD '=[];'])    % double array: beginning of time interval
eval(['DSI.TimeB.' FIELD '=[];'])    % double array: end of time interval
    for kt=1:length(FNList)
%A20070012007003.L3m_3D_CHLO_4.hdf?l3m_data[0:1:4319][0:1:8639]
FN=FNList{kt};
%tA=datenum(FN(2:8),'yyyyddd');
%tB=datenum(FN(9:15),'yyyyddd')+1;
tA=datenum(str2num(FN(2:5)),01,str2num(FN(6:8)));
tB=datenum(str2num(FN(9:12)),01,str2num(FN(13:15)))+1;
t=(tA+tB)*0.5;
eval(['DSI.TimeA.' FIELD '(end+1)=tA;'])
eval(['DSI.TimeB.' FIELD '(end+1)=tB;'])
eval(['DSI.Time.'  FIELD '(end+1)=t;' ])
    end %kt
end %kf

DSI=merge_time_arrays(DSI);

NY=4320;NX=8640;
DSI.Latitude =  90-((1:1:NY)-0.5)'/NY*180;
DSI.Longitude=-180+((1:1:NX)-0.5)'/NX*360;
DSI=DSI_common2(DSI);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function DSI=DSI_OceanColor_MODIS_4km_8day_hdf 
% create DataSetInventory of Ocean Color MODIS 
DSI.DataSetName='OceanColor';
DSI.DataSetBranch='OceanColor_MODIS_4km_8day_hdf';

% a general request employed by get_DataSet program has the following pattern
% loaddap([URLSITE URLPATH URLFILE '?' URLCVAR URLCTIME URLCLAT URLCLON URLCDEPTH])
%   constraints URLCTIME URLCLAT URLCLON URLCDEPTH can be in different order
%   constraints URLCLAT URLCLON URLCDEPTH will be generated by program get

% Examples of files in the dataset
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/
%A20030012003008.L3m_8D_CHLO_4.hdf?l3m_data[0:1:4319][0:1:8639]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/
%A20030012003008.L3m_8D_A531_4.hdf?l3m_data[0:1:4319][0:1:8639]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/
%A20030012003008.L3m_8D_K490_4.hdf?l3m_data[0:1:4319][0:1:8639]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/
%A20030012003008.L3m_8D_L551_4.hdf?l3m_data[0:1:4319][0:1:8639]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/
%A20030012003008.L3m_8D_NSST_4.hdf?l3m_data[0:1:4319][0:1:8639],l3m_qual[0:1:4319][0:1:8639]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/
%A20030012003008.L3m_8D_SST_4.hdf?l3m_data[0:1:4319][0:1:8639]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/
%A20030012003008.L3m_8D_T869_4.hdf?l3m_data[0:1:4319][0:1:8639]

% define list of fields or variables available in the dataset
% enter field names in rows; 
% columns reserved for defining alternative names and other properties associated with fields
% column 1 field name in opendap, column 2 variable name in dataset
LaLo={'latitude','longitude'};
DSI.FieldsTable={
'Chlor'     ,'l3m_data',LaLo,101,'mg m^-3\\000';
'SST'       ,'l3m_data',LaLo,101,'deg-C\\000';
%'SST_qual'  ,''       ,LaLo,101,'deg-C\\000' ; % absent
'NSST_qual' ,'l3m_qual',LaLo,101,'deg-C\\000';
'NSST'      ,'l3m_data',LaLo,101,'deg-C\\000';
'A531'      ,'l3m_data',LaLo,101,'\\000';
'K490'      ,'l3m_data',LaLo,101,'m^-1\\000';
'L551'      ,'l3m_data',LaLo,101,'mW cm^-2 um^-1 sr^-1\\000';
'T869'      ,'l3m_data',LaLo,101,'\\000';
};
DSI.Fields              =DSI.FieldsTable(:,1);
DSI.Fields_NameDS       =DSI.FieldsTable(:,2);
DSI.Fields_NameReturned =DSI.FieldsTable(:,2);
DSI.Fields_NameLong     =DSI.FieldsTable(:,1);
DSI.Fields_NameMenu     =DSI.FieldsTable(:,1);
DSI.Fields_Coord        =DSI.FieldsTable(:,3);
DSI.Fields_CoordDS      =DSI.FieldsTable(:,3);
DSI.Fields_CBNum        =DSI.FieldsTable(:,4);
DSI.Fields_Units        =DSI.FieldsTable(:,5);

% Replace missing values with NaN
DSI.FormulaNaN.Chlor='f(find(f==65535))=NaN;';
DSI.FormulaNaN.SST='f(find(f==255))=NaN;';
%DSI.FormulaNaN.SST_qual='';
DSI.FormulaNaN.NSST='f(find(f==65535))=NaN;';
DSI.FormulaNaN.NSST_qual='f(find(f==255))=NaN;';
DSI.FormulaNaN.A531='f(find(f==255))=NaN;';
DSI.FormulaNaN.K490='f(find(f==65535))=NaN;';
DSI.FormulaNaN.L551='f(find(f==255))=NaN;';
DSI.FormulaNaN.T869='f(find(f==255))=NaN;';

% Convert to physical units
CnvLog='f=A.Global_Attributes.HDF_GLOBAL.Base.^(A.Global_Attributes.HDF_GLOBAL.Slope*f+A.Global_Attributes.HDF_GLOBAL.Intercept);';
CnvLin='f=A.Global_Attributes.HDF_GLOBAL.Slope*f+A.Global_Attributes.HDF_GLOBAL.Intercept;';
DSI.FormulaCnv.Chlor=CnvLog;
DSI.FormulaCnv.SST=CnvLin;
%DSI.FormulaCnv.SST_qual='';% absent
DSI.FormulaCnv.NSST=CnvLin;
DSI.FormulaCnv.NSST_qual='';
DSI.FormulaCnv.A531=CnvLin;
DSI.FormulaCnv.K490=CnvLog;
DSI.FormulaCnv.L551=CnvLin;
DSI.FormulaCnv.T869=CnvLin;

% url location of the dataset files
DSI.URLSITE='http://www.marine.csiro.au';
DSI.URLPATH='/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/';

% obtain list of files with extention 'hdf'
%FNList=htmldirlist(URL,EXT)
FNList=htmldirlist([DSI.URLSITE DSI.URLPATH],'hdf'); 

% exctract the list of files corresponding to each field or variable
% note that string 8D_ is required otherwise SST_4 will match NSST_4 as well
DSI.URLFILE.Chlor       =FNList(find(cellfun(@isempty,strfind(FNList,'8D_CHLO_4.hdf'))==0));
DSI.URLFILE.SST         =FNList(find(cellfun(@isempty,strfind(FNList,'8D_SST_4.hdf' ))==0));
%DSI.URLFILE.SST_qual    =FNList(find(cellfun(@isempty,strfind(FNList,'8D_SST_4.hdf' ))==0));
DSI.URLFILE.NSST        =FNList(find(cellfun(@isempty,strfind(FNList,'8D_NSST_4.hdf'))==0));
DSI.URLFILE.NSST_qual   =FNList(find(cellfun(@isempty,strfind(FNList,'8D_NSST_4.hdf'))==0));
DSI.URLFILE.A531        =FNList(find(cellfun(@isempty,strfind(FNList,'8D_A531_4.hdf'))==0));
DSI.URLFILE.K490        =FNList(find(cellfun(@isempty,strfind(FNList,'8D_K490_4.hdf'))==0));
DSI.URLFILE.L551        =FNList(find(cellfun(@isempty,strfind(FNList,'8D_L551_4.hdf'))==0));
DSI.URLFILE.T869        =FNList(find(cellfun(@isempty,strfind(FNList,'8D_T869_4.hdf'))==0));

DSI.URLCTIME=''; % empty not used in this dataset
DSI.URLCDEPTH=''; % empty not used in this dataset

% browse through list of fields and obtain array of available times for each field
for kf=1:length(DSI.FieldsTable(:,1)) 
FIELD=DSI.FieldsTable{kf,1};    
eval(['FNList=DSI.URLFILE.' FIELD ';'])
CVAR=DSI.FieldsTable{kf,2};
eval(['DSI.URLCVAR.' FIELD '=''' CVAR ''';']) 

% define empty arrays
eval(['DSI.Time.'  FIELD '=[];'])    % double array: center of time interval
eval(['DSI.TimeA.' FIELD '=[];'])    % double array: beginning of time interval
eval(['DSI.TimeB.' FIELD '=[];'])    % double array: end of time interval
    for kt=1:length(FNList)
%A20030012003008.L3m_8D_CHLO_4.hdf?l3m_data[0:1:4319][0:1:8639]
FN=FNList{kt};
%tA=datenum(FN(2:8),'yyyyddd');
%tB=datenum(FN(9:15),'yyyyddd')+1;
tA=datenum(str2num(FN(2:5)),01,str2num(FN(6:8)));
tB=datenum(str2num(FN(9:12)),01,str2num(FN(13:15)))+1;
t=(tA+tB)*0.5;
eval(['DSI.TimeA.' FIELD '(end+1)=tA;'])
eval(['DSI.TimeB.' FIELD '(end+1)=tB;'])
eval(['DSI.Time.'  FIELD '(end+1)=t;' ])
    end %kt
end %kf

DSI=merge_time_arrays(DSI);

NY=4320;NX=8640;
DSI.Latitude =  90-((1:1:NY)-0.5)'/NY*180;
DSI.Longitude=-180+((1:1:NX)-0.5)'/NX*360;
DSI=DSI_common2(DSI);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function DSI=DSI_OceanColor_MODIS_9km_3day_hdf 
% create DataSetInventory of Ocean Color MODIS 
DSI.DataSetName='OceanColor';
DSI.DataSetBranch='OceanColor_MODIS_9km_3day_hdf';

% a general request employed by get_DataSet program has the following pattern
% loaddap([URLSITE URLPATH URLFILE '?' URLCVAR URLCTIME URLCLAT URLCLON URLCDEPTH])
%   constraints URLCTIME URLCLAT URLCLON URLCDEPTH can be in different order
%   constraints URLCLAT URLCLON URLCDEPTH will be generated by program get

% Examples of files in the dataset
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/3_day/hdf/
%A20060802006082.L3m_3D_CHLO_9.hdf?l3m_data[0:1:2159][0:1:4319]

% url location of the dataset files
DSI.URLSITE='http://www.marine.csiro.au';
DSI.URLPATH='/dods/nph-dods/dods-data/ocean_colour/modis/global/3_day/hdf/';

% define list of fields or variables available in the dataset
% enter field names in rows; 
% columns reserved for defining alternative names and other properties associated with fields
% column 1 field name in opendap, column 2 variable name in dataset
LaLo={'latitude','longitude'};
DSI.FieldsTable={
'Chlor'     ,'l3m_data',LaLo,101,'mg m^-3\\000';
};
DSI.Fields              =DSI.FieldsTable(:,1);
DSI.Fields_NameDS       =DSI.FieldsTable(:,2);
DSI.Fields_NameReturned =DSI.FieldsTable(:,2);
DSI.Fields_NameLong     =DSI.FieldsTable(:,1);
DSI.Fields_NameMenu     =DSI.FieldsTable(:,1);
DSI.Fields_Coord        =DSI.FieldsTable(:,3);
DSI.Fields_CoordDS      =DSI.FieldsTable(:,3);
DSI.Fields_CBNum        =DSI.FieldsTable(:,4);
DSI.Fields_Units        =DSI.FieldsTable(:,5);

% Replace missing values with NaN
DSI.FormulaNaN.Chlor='f(find(f==255))=NaN;';

% Convert to physical units
DSI.FormulaCnv.Chlor='f=A.Global_Attributes.HDF_GLOBAL.Base.^(A.Global_Attributes.HDF_GLOBAL.Slope*f+A.Global_Attributes.HDF_GLOBAL.Intercept);';


%FNList=htmldirlist(URL,EXT)
FNList=htmldirlist([DSI.URLSITE DSI.URLPATH],'hdf'); % list of files with extention 'hdf'

% exctract the list of files corresponding to each field or variable
% note that string 8D_ is required otherwise SST_4 will match NSST_4 as well
DSI.URLFILE.Chlor       =FNList(find(cellfun(@isempty,strfind(FNList,'3D_CHLO_9.hdf'))==0));

DSI.URLCTIME=''; % empty not used in this dataset
DSI.URLCDEPTH=''; % empty not used in this dataset

% browse through list of fields and obtain array of available times for each field
for kf=1:length(DSI.FieldsTable(:,1)) 
FIELD=DSI.FieldsTable{kf,1};    
eval(['FNList=DSI.URLFILE.' FIELD ';'])
CVAR=DSI.FieldsTable{kf,2};
eval(['DSI.URLCVAR.' FIELD '=''' CVAR ''';']) 

% define empty arrays
eval(['DSI.Time.'  FIELD '=[];'])    % double array: center of time interval
eval(['DSI.TimeA.' FIELD '=[];'])    % double array: beginning of time interval
eval(['DSI.TimeB.' FIELD '=[];'])    % double array: end of time interval
    for kt=1:length(FNList)
%A20070012007003.L3m_3D_CHLO_4.hdf?l3m_data[0:1:4319][0:1:8639]
FN=FNList{kt};
%tA=datenum(FN(2:8),'yyyyddd');
%tB=datenum(FN(9:15),'yyyyddd')+1;
tA=datenum(str2num(FN(2:5)),01,str2num(FN(6:8)));
tB=datenum(str2num(FN(9:12)),01,str2num(FN(13:15)))+1;
t=(tA+tB)*0.5;
eval(['DSI.TimeA.' FIELD '(end+1)=tA;'])
eval(['DSI.TimeB.' FIELD '(end+1)=tB;'])
eval(['DSI.Time.'  FIELD '(end+1)=t;' ])
    end %kt
end %kf

DSI=merge_time_arrays(DSI);

NY=4320;NX=8640;
DSI.Latitude =  90-((1:1:NY)-0.5)'/NY*180;
DSI.Longitude=-180+((1:1:NX)-0.5)'/NX*360;
DSI=DSI_common2(DSI);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function DSI=DSI_OceanColor_MODIS_9km_8day_hdf 
% create DataSetInventory of Ocean Color MODIS
DSI.DataSetName='OceanColor';
DSI.DataSetBranch='OceanColor_MODIS_9km_8day_hdf';

% a general request employed by get_DataSet program has the following pattern
% loaddap([URLSITE URLPATH URLFILE '?' URLCVAR URLCTIME URLCLAT URLCLON URLCDEPTH])
%   constraints URLCTIME URLCLAT URLCLON URLCDEPTH can be in different order
%   constraints URLCLAT URLCLON URLCDEPTH will be generated by program get

% Examples of files in the dataset
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/
%A20030012003008.L3m_8D_CHLO_9.hdf?l3m_data[0:1:2159][0:1:4319]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/
%A20030012003008.L3m_8D_A531_9.hdf?l3m_data[0:1:2159][0:1:4319]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/
%A20030012003008.L3m_8D_K490_9.hdf?l3m_data[0:1:2159][0:1:4319]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/
%A20030012003008.L3m_8D_L551_9.hdf?l3m_data[0:1:2159][0:1:4319]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/
%A20030012003008.L3m_8D_NSST_9.hdf?l3m_data[0:1:2159][0:1:4319],l3m_qual[0:1:2159][0:1:4319]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/
%A20030012003008.L3m_8D_SST_9.hdf?l3m_data[0:1:2159][0:1:4319]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/
%A20030012003008.L3m_8D_T869_9.hdf?l3m_data[0:1:2159][0:1:4319]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/
%A20030012003008.L3m_8D_XS_CHLO_9.hdf?l3m_data[0:1:2159][0:1:4319]

% define list of fields or variables available in the dataset
% enter field names in rows; 
% columns reserved for defining alternative names and other properties associated with fields
% column 1 field name in opendap, column 2 variable name in dataset
LaLo={'latitude','longitude'};
DSI.FieldsTable={
'Chlor'     ,'l3m_data',LaLo,101,'mg m^-3\\000';
'SST'       ,'l3m_data',LaLo,101,'deg-C\\000';
%'SST_qual'  ,'l3m_qual',LaLo,101,'deg-C\\000'; %absent
'NSST_qual' ,'l3m_qual',LaLo,101,'deg-C\\000';
'NSST'      ,'l3m_data',LaLo,101,'deg-C\\000';
'A531'      ,'l3m_data',LaLo,101,'\\000';
'K490'      ,'l3m_data',LaLo,101,'m^-1\\000';
'L551'      ,'l3m_data',LaLo,101,'mW cm^-2 um^-1 sr^-1\\000';
'T869'      ,'l3m_data',LaLo,101,'\\000';
'XSChlor'   ,'l3m_data',LaLo,101,'mg m^-3\\000';
};
DSI.Fields              =DSI.FieldsTable(:,1);
DSI.Fields_NameDS       =DSI.FieldsTable(:,2);
DSI.Fields_NameReturned =DSI.FieldsTable(:,2);
DSI.Fields_NameLong     =DSI.FieldsTable(:,1);
DSI.Fields_NameMenu     =DSI.FieldsTable(:,1);
DSI.Fields_Coord        =DSI.FieldsTable(:,3);
DSI.Fields_CoordDS      =DSI.FieldsTable(:,3);
DSI.Fields_CBNum        =DSI.FieldsTable(:,4);
DSI.Fields_Units        =DSI.FieldsTable(:,5);

% Replace missing values with NaN
DSI.FormulaNaN.Chlor='f(find(f==255))=NaN;';
DSI.FormulaNaN.SST='f(find(f==255))=NaN;';
%DSI.FormulaNaN.SST_qual=''; % absent
DSI.FormulaNaN.NSST='f(find(f==65535))=NaN;';
DSI.FormulaNaN.NSST_qual='f(find(f==255))=NaN;';
DSI.FormulaNaN.A531='f(find(f==255))=NaN;';
DSI.FormulaNaN.K490='f(find(f==255))=NaN;';
DSI.FormulaNaN.L551='f(find(f==255))=NaN;';
DSI.FormulaNaN.T869='f(find(f==255))=NaN;';
DSI.FormulaNaN.XSChlor='f(find(f==65535))=NaN;';

% Convert to physical units
CnvLog='f=A.Global_Attributes.HDF_GLOBAL.Base.^(A.Global_Attributes.HDF_GLOBAL.Slope*f+A.Global_Attributes.HDF_GLOBAL.Intercept);';
CnvLin='f=A.Global_Attributes.HDF_GLOBAL.Slope*f+A.Global_Attributes.HDF_GLOBAL.Intercept;';
DSI.FormulaCnv.Chlor=CnvLog;
DSI.FormulaCnv.SST=CnvLin;
%DSI.FormulaCnv.SST_qual='';% absent
DSI.FormulaCnv.NSST=CnvLin;
DSI.FormulaCnv.NSST_qual='';
DSI.FormulaCnv.A531=CnvLin;
DSI.FormulaCnv.K490=CnvLog;
DSI.FormulaCnv.L551=CnvLin;
DSI.FormulaCnv.T869=CnvLin;
DSI.FormulaCnv.XSChlor=CnvLog;

% url location of the dataset files
DSI.URLSITE='http://www.marine.csiro.au';
DSI.URLPATH='/dods/nph-dods/dods-data/ocean_colour/modis/global/8_day/hdf/';

% obtain list of files with extention 'hdf'
%FNList=htmldirlist(URL,EXT)
FNList=htmldirlist([DSI.URLSITE DSI.URLPATH],'hdf'); 

% exctract the list of files corresponding to each field or variable
% note that string 8D_ is required otherwise SST will match NSST as well
DSI.URLFILE.Chlor       =FNList(find(cellfun(@isempty,strfind(FNList,'8D_CHLO_9.hdf'))==0));
DSI.URLFILE.SST         =FNList(find(cellfun(@isempty,strfind(FNList,'8D_SST_9.hdf' ))==0));
%DSI.URLFILE.SST_qual    =FNList(find(cellfun(@isempty,strfind(FNList,'8D_SST_9.hdf' ))==0));
DSI.URLFILE.NSST        =FNList(find(cellfun(@isempty,strfind(FNList,'8D_NSST_9.hdf'))==0));
DSI.URLFILE.NSST_qual   =FNList(find(cellfun(@isempty,strfind(FNList,'8D_NSST_9.hdf'))==0));
DSI.URLFILE.A531        =FNList(find(cellfun(@isempty,strfind(FNList,'8D_A531_9.hdf'))==0));
DSI.URLFILE.K490        =FNList(find(cellfun(@isempty,strfind(FNList,'8D_K490_9.hdf'))==0));
DSI.URLFILE.L551        =FNList(find(cellfun(@isempty,strfind(FNList,'8D_L551_9.hdf'))==0));
DSI.URLFILE.T869        =FNList(find(cellfun(@isempty,strfind(FNList,'8D_T869_9.hdf'))==0));
DSI.URLFILE.XSChlor     =FNList(find(cellfun(@isempty,strfind(FNList,'8D_XS_CHLO_9.hdf'))==0));

DSI.URLCTIME=''; % empty not used in this dataset
DSI.URLCDEPTH=''; % empty not used in this dataset

% browse through list of fields and obtain array of available times for each field
for kf=1:length(DSI.FieldsTable(:,1)) 
FIELD=DSI.FieldsTable{kf,1};    
eval(['FNList=DSI.URLFILE.' FIELD ';'])
CVAR=DSI.FieldsTable{kf,2};
eval(['DSI.URLCVAR.' FIELD '=''' CVAR ''';']) 

% define empty arrays
eval(['DSI.Time.'  FIELD '=[];'])    % double array: center of time interval
eval(['DSI.TimeA.' FIELD '=[];'])    % double array: beginning of time interval
eval(['DSI.TimeB.' FIELD '=[];'])    % double array: end of time interval
    for kt=1:length(FNList)
%A20030012003008.L3m_8D_CHLO_9.hdf?l3m_data[0:1:2159][0:1:4319]        
FN=FNList{kt};
%tA=datenum(FN(2:8),'yyyyddd');
%tB=datenum(FN(9:15),'yyyyddd')+1;
tA=datenum(str2num(FN(2:5)),01,str2num(FN(6:8)));
tB=datenum(str2num(FN(9:12)),01,str2num(FN(13:15)))+1;
t=(tA+tB)*0.5;
eval(['DSI.TimeA.' FIELD '(end+1)=tA;'])
eval(['DSI.TimeB.' FIELD '(end+1)=tB;'])
eval(['DSI.Time.'  FIELD '(end+1)=t;' ])
    end %kt
end %kf

DSI=merge_time_arrays(DSI);

NY=2160;NX=4320;
DSI.Latitude =  90-((1:1:NY)-0.5)'/NY*180;
DSI.Longitude=-180+((1:1:NX)-0.5)'/NX*360;
DSI=DSI_common2(DSI);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function DSI=DSI_OceanColor_SeaWiFS_9km_8day_hdf;
% create DataSetInventory of Ocean Color SeaWiFS
DSI.DataSetName='OceanColor';
DSI.DataSetBranch='OceanColor_SeaWiFS_9km_8day_hdf';

% a general request employed by get_DataSet program has the following pattern
% loaddap([URLSITE URLPATH URLFILE '?' URLCVAR URLCTIME URLCLAT URLCLON URLCDEPTH])
%   constraints URLCTIME URLCLAT URLCLON URLCDEPTH can be in different order
%   constraints URLCLAT URLCLON URLCDEPTH will be generated by program get

% Examples of files in the dataset
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/seawifs/global/8_day/hdf/
%S19980011998008.L3m_8D_CHLO_9.hdf?l3m_data[0:1:2159][0:1:4319]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/seawifs/global/8_day/hdf/
%S19980011998008.L3m_8D_A510_9.hdf?l3m_data[0:1:2159][0:1:4319]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/seawifs/global/8_day/hdf/
%S19980011998008.L3m_8D_K490_9.hdf?l3m_data[0:1:2159][0:1:4319]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/seawifs/global/8_day/hdf/
%S19980011998008.L3m_8D_L555_9.hdf?l3m_data[0:1:2159][0:1:4319]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/seawifs/global/8_day/hdf/
%S19980011998008.L3m_8D_LND_NDVI_9.hdf?l3m_data[0:1:2159][0:1:4319]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/seawifs/global/8_day/hdf/
%S19980011998008.L3m_8D_PAR_9.hdf?l3m_data[0:1:2159][0:1:4319]
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/seawifs/global/8_day/hdf/
%S19980011998008.L3m_8D_T865_9.hdf?l3m_data[0:1:2159][0:1:4319]

% define list of fields or variables available in the dataset
% enter field names in rows; 
% columns reserved for defining alternative names and other properties associated with fields
% column 1 field name in opendap, column 2 variable name in dataset
LaLo={'latitude','longitude'};
DSI.FieldsTable={
'Chlor'     ,'l3m_data',LaLo,101,'mg m^-3\\000';
'A510'      ,'l3m_data',LaLo,101,'\\000';
'K490'      ,'l3m_data',LaLo,101,'m^-1\\000';
'L555'      ,'l3m_data',LaLo,101,'mW cm^-2 um^-1 sr^-1\\000';
'LND_NDVI'  ,'l3m_data',LaLo,101,'\\000';
'PAR'       ,'l3m_data',LaLo,101,'Einstein m^-2 Day\\000';
'T865'      ,'l3m_data',LaLo,101,'\\000';
};
DSI.Fields              =DSI.FieldsTable(:,1);
DSI.Fields_NameDS       =DSI.FieldsTable(:,2);
DSI.Fields_NameReturned =DSI.FieldsTable(:,2);
DSI.Fields_NameLong     =DSI.FieldsTable(:,1);
DSI.Fields_NameMenu     =DSI.FieldsTable(:,1);
DSI.Fields_Coord        =DSI.FieldsTable(:,3);
DSI.Fields_CoordDS      =DSI.FieldsTable(:,3);
DSI.Fields_CBNum        =DSI.FieldsTable(:,4);
DSI.Fields_Units        =DSI.FieldsTable(:,5);

% Replace missing values with NaN
DSI.FormulaNaN.Chlor='f(find(f==65535))=NaN;';
DSI.FormulaNaN.A510='f(find(f==255))=NaN;';
DSI.FormulaNaN.K490='f(find(f==65535))=NaN;';
DSI.FormulaNaN.L555='f(find(f==255))=NaN;';
DSI.FormulaNaN.LND_NDVI='f(find(f==255))=NaN;';
DSI.FormulaNaN.PAR='f(find(f==65535))=NaN;';
DSI.FormulaNaN.T865='f(find(f==255))=NaN;';

% Convert to physical units
CnvLog='f=A.Global_Attributes.HDF_GLOBAL.Base.^(A.Global_Attributes.HDF_GLOBAL.Slope*f+A.Global_Attributes.HDF_GLOBAL.Intercept);';
CnvLin='f=A.Global_Attributes.HDF_GLOBAL.Slope*f+A.Global_Attributes.HDF_GLOBAL.Intercept;';
DSI.FormulaCnv.Chlor=CnvLog;
DSI.FormulaCnv.A510=CnvLin;
DSI.FormulaCnv.K490=CnvLin;
DSI.FormulaCnv.L555=CnvLin;
DSI.FormulaCnv.LND_NDVI=CnvLin;
DSI.FormulaCnv.PAR=CnvLin;
DSI.FormulaCnv.T865=CnvLin;

% url location of the dataset files
DSI.URLSITE='http://www.marine.csiro.au';
DSI.URLPATH='/dods/nph-dods/dods-data/ocean_colour/seawifs/global/8_day/hdf/';
% obtain list of files with extention 'hdf'
%FNList=htmldirlist(URL,EXT)
FNList=htmldirlist([DSI.URLSITE DSI.URLPATH],'hdf'); 

% exctract the list of files corresponding to each field or variable
DSI.URLFILE.Chlor     =FNList(find(cellfun(@isempty,strfind(FNList,'8D_CHLO_9.hdf'))==0));
DSI.URLFILE.A510      =FNList(find(cellfun(@isempty,strfind(FNList,'8D_A510_9.hdf'))==0));
DSI.URLFILE.K490      =FNList(find(cellfun(@isempty,strfind(FNList,'8D_K490_9.hdf'))==0));
DSI.URLFILE.L555      =FNList(find(cellfun(@isempty,strfind(FNList,'8D_L555_9.hdf'))==0));
DSI.URLFILE.LND_NDVI  =FNList(find(cellfun(@isempty,strfind(FNList,'8D_LND_NDVI_9.hdf'))==0));
DSI.URLFILE.PAR       =FNList(find(cellfun(@isempty,strfind(FNList,'8D_PAR_9.hdf'))==0));
DSI.URLFILE.T865      =FNList(find(cellfun(@isempty,strfind(FNList,'8D_T865_9.hdf'))==0));

% as of Nov 12, 2009 file structure changed
%S19972491997256.L3m_8D_CHL_chlor_a_9km.hdf
%S19972491997256.L3m_8D_PAR_par_9km.hdf
%S19972491997256.L3m_8D_PIC_pic_9km.hdf
%S19972491997256.L3m_8D_POC_poc_9km.hdf

DSI.URLCTIME=''; % empty not used in this dataset
DSI.URLCDEPTH=''; % empty not used in this dataset

% browse through list of fields and obtain array of available times for each field
for kf=1:length(DSI.FieldsTable(:,1)) 
FIELD=DSI.FieldsTable{kf,1};    
eval(['FNList=DSI.URLFILE.' FIELD ';'])
CVAR=DSI.FieldsTable{kf,2};
eval(['DSI.URLCVAR.' FIELD '=''' CVAR ''';']) 

% define empty arrays
eval(['DSI.Time.'  FIELD '=[];'])    % double array: center of time interval
eval(['DSI.TimeA.' FIELD '=[];'])    % double array: beginning of time interval
eval(['DSI.TimeB.' FIELD '=[];'])    % double array: end of time interval
    for kt=1:length(FNList)
%S19980011998008.L3m_8D_CHLO_9.hdf?l3m_data[0:1:2159][0:1:4319]
FN=FNList{kt};
%tA=datenum(FN(2:8),'yyyyddd');
%tB=datenum(FN(9:15),'yyyyddd')+1;
tA=datenum(str2num(FN(2:5)),01,str2num(FN(6:8)));
tB=datenum(str2num(FN(9:12)),01,str2num(FN(13:15)))+1;
t=(tA+tB)*0.5;
eval(['DSI.TimeA.' FIELD '(end+1)=tA;'])
eval(['DSI.TimeB.' FIELD '(end+1)=tB;'])
eval(['DSI.Time.'  FIELD '(end+1)=t;' ])
    end %kt
end %kf

DSI=merge_time_arrays(DSI);

NY=2160;NX=4320;
DSI.Latitude =  90-((1:1:NY)-0.5)'/NY*180;
DSI.Longitude=-180+((1:1:NX)-0.5)'/NX*360;
DSI=DSI_common2(DSI);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function DSI=DSI_OceanColor_MergedMODISSeaWiFS_9km_1day_hdf 
% create DataSetInventory of Ocean Color Merged MODIS & SeaWiFS 
DSI.DataSetName='OceanColor';
DSI.DataSetBranch='OceanColor_MergedMODISSeaWiFS_9km_1day_hdf';

% a general request employed by get_DataSet program has the following pattern
% loaddap([URLSITE URLPATH URLFILE '?' URLCVAR URLCTIME URLCLAT URLCLON URLCDEPTH])
%   constraints URLCTIME URLCLAT URLCLON URLCDEPTH can be in different order
%   constraints URLCLAT URLCLON URLCDEPTH will be generated by program get

% Examples of files in the dataset
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/merged_modis_seawifs/global/1_day/hdf/
%A2003001.L3m_DAY_XS_CHLO_9.hdf?l3m_data[0:1:2159][0:1:4319]

% define list of fields or variables available in the dataset
% enter field names in rows; 
% columns reserved for defining alternative names and other properties associated with fields
% column 1 field name in opendap, column 2 variable name in dataset
LaLo={'latitude','longitude'};
DSI.FieldsTable={
'XSChlor'     ,'l3m_data',LaLo,101,'mg m^-3\\000';
};
DSI.Fields              =DSI.FieldsTable(:,1);
DSI.Fields_NameDS       =DSI.FieldsTable(:,2);
DSI.Fields_NameReturned =DSI.FieldsTable(:,2);
DSI.Fields_NameLong     =DSI.FieldsTable(:,1);
DSI.Fields_NameMenu     =DSI.FieldsTable(:,1);
DSI.Fields_Coord        =DSI.FieldsTable(:,3);
DSI.Fields_CoordDS      =DSI.FieldsTable(:,3);
DSI.Fields_CBNum        =DSI.FieldsTable(:,4);
DSI.Fields_Units        =DSI.FieldsTable(:,5);

% Replace missing values with NaN
DSI.FormulaNaN.XSChlor='f(find(f==65535))=NaN;';

% Convert to physical units
DSI.FormulaCnv.XSChlor='f=A.Global_Attributes.HDF_GLOBAL.Base.^(A.Global_Attributes.HDF_GLOBAL.Slope*f+A.Global_Attributes.HDF_GLOBAL.Intercept);';

% url location of the dataset files
DSI.URLSITE='http://www.marine.csiro.au';
DSI.URLPATH='/dods/nph-dods/dods-data/ocean_colour/merged_modis_seawifs/global/1_day/hdf/';

% obtain list of files with extention 'hdf'
%FNList=htmldirlist(URL,EXT)
FNList=htmldirlist([DSI.URLSITE DSI.URLPATH],'hdf'); 

% exctract the list of files corresponding to each field or variable
% note that string 8D_ is required otherwise SST_4 will match NSST_4 as well
DSI.URLFILE.XSChlor       =FNList(find(cellfun(@isempty,strfind(FNList,'DAY_XS_CHLO_9.hdf'))==0));

DSI.URLCTIME=''; % empty not used in this dataset
DSI.URLCDEPTH=''; % empty not used in this dataset

% browse through list of fields and obtain array of available times for each field
for kf=1:length(DSI.FieldsTable(:,1)) 
FIELD=DSI.FieldsTable{kf,1};    
eval(['FNList=DSI.URLFILE.' FIELD ';'])
CVAR=DSI.FieldsTable{kf,2};
eval(['DSI.URLCVAR.' FIELD '=''' CVAR ''';']) 

% define empty arrays
eval(['DSI.Time.'  FIELD '=[];'])    % double array: center of time interval
eval(['DSI.TimeA.' FIELD '=[];'])    % double array: beginning of time interval
eval(['DSI.TimeB.' FIELD '=[];'])    % double array: end of time interval
    for kt=1:length(FNList)
%A2003001.L3m_DAY_XS_CHLO_9.hdf?l3m_data[0:1:2159][0:1:4319]
FN=FNList{kt};
%tA=datenum(FN(2:8),'yyyyddd');
%tB=datenum(FN(2:8),'yyyyddd')+1;
tA=datenum(str2num(FN(2:5)),01,str2num(FN(6:8)));
tB=tA+1;
t=(tA+tB)*0.5;
eval(['DSI.TimeA.' FIELD '(end+1)=tA;'])
eval(['DSI.TimeB.' FIELD '(end+1)=tB;'])
eval(['DSI.Time.'  FIELD '(end+1)=t;' ])
    end %kt
end %kf

DSI=merge_time_arrays(DSI);

NY=2160;NX=4320;
DSI.Latitude =  90-((1:1:NY)-0.5)'/NY*180;
DSI.Longitude=-180+((1:1:NX)-0.5)'/NX*360;
DSI=DSI_common2(DSI);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function DSI=DSI_OceanColor_MergedMODISSeaWiFS_9km_8day_hdf 
% create DataSetInventory of Ocean Color Merged MODIS & SeaWiFS 
DSI.DataSetName='OceanColor';
DSI.DataSetBranch='OceanColor_MergedMODISSeaWiFS_9km_8day_hdf';

% a general request employed by get_DataSet program has the following pattern
% loaddap([URLSITE URLPATH URLFILE '?' URLCVAR URLCTIME URLCLAT URLCLON URLCDEPTH])
%   constraints URLCTIME URLCLAT URLCLON URLCDEPTH can be in different order
%   constraints URLCLAT URLCLON URLCDEPTH will be generated by program get

% Examples of files in the dataset
%http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/merged_modis_seawifs/global/8_day/hdf/
%A20030012003008.L3m_8D_XS_CHLO_9.hdf?l3m_data[0:1:2159][0:1:4319]

% define list of fields or variables available in the dataset
% enter field names in rows; 
% columns reserved for defining alternative names and other properties associated with fields
% column 1 field name in opendap, column 2 variable name in dataset
LaLo={'latitude','longitude'};
DSI.FieldsTable={
'XSChlor'     ,'l3m_data',LaLo,101,'mg m^-3\\000';
};
DSI.Fields              =DSI.FieldsTable(:,1);
DSI.Fields_NameDS       =DSI.FieldsTable(:,2);
DSI.Fields_NameReturned =DSI.FieldsTable(:,2);
DSI.Fields_NameLong     =DSI.FieldsTable(:,1);
DSI.Fields_NameMenu     =DSI.FieldsTable(:,1);
DSI.Fields_Coord        =DSI.FieldsTable(:,3);
DSI.Fields_CoordDS      =DSI.FieldsTable(:,3);
DSI.Fields_CBNum        =DSI.FieldsTable(:,4);
DSI.Fields_Units        =DSI.FieldsTable(:,5);

% Replace missing values with NaN
DSI.FormulaNaN.XSChlor='f(find(f==65535))=NaN;';

% Convert to physical units
DSI.FormulaCnv.XSChlor='f=A.Global_Attributes.HDF_GLOBAL.Base.^(A.Global_Attributes.HDF_GLOBAL.Slope*f+A.Global_Attributes.HDF_GLOBAL.Intercept);';

% url location of the dataset files
DSI.URLSITE='http://www.marine.csiro.au';
DSI.URLPATH='/dods/nph-dods/dods-data/ocean_colour/merged_modis_seawifs/global/8_day/hdf/';

% obtain list of files with extention 'hdf'
%FNList=htmldirlist(URL,EXT)
FNList=htmldirlist([DSI.URLSITE DSI.URLPATH],'hdf'); 

% exctract the list of files corresponding to each field or variable
% note that string 8D_ is required otherwise SST_4 will match NSST_4 as well
DSI.URLFILE.XSChlor       =FNList(find(cellfun(@isempty,strfind(FNList,'8D_XS_CHLO_9.hdf'))==0));

DSI.URLCTIME=''; % empty not used in this dataset
DSI.URLCDEPTH=''; % empty not used in this dataset

% browse through list of fields and obtain array of available times for each field
for kf=1:length(DSI.FieldsTable(:,1)) 
FIELD=DSI.FieldsTable{kf,1};    
eval(['FNList=DSI.URLFILE.' FIELD ';'])
CVAR=DSI.FieldsTable{kf,2};
eval(['DSI.URLCVAR.' FIELD '=''' CVAR ''';']) 

% define empty arrays
eval(['DSI.Time.'  FIELD '=[];'])    % double array: center of time interval
eval(['DSI.TimeA.' FIELD '=[];'])    % double array: beginning of time interval
eval(['DSI.TimeB.' FIELD '=[];'])    % double array: end of time interval
    for kt=1:length(FNList)
%A20030012003008.L3m_8D_XS_CHLO_9.hdf?l3m_data[0:1:2159][0:1:4319]
FN=FNList{kt};
%tA=datenum(FN(2:8),'yyyyddd');
%tB=datenum(FN(9:15),'yyyyddd')+1;
tA=datenum(str2num(FN(2:5)),01,str2num(FN(6:8)));
tB=datenum(str2num(FN(9:12)),01,str2num(FN(13:15)))+1;
t=(tA+tB)*0.5;
eval(['DSI.TimeA.' FIELD '(end+1)=tA;'])
eval(['DSI.TimeB.' FIELD '(end+1)=tB;'])
eval(['DSI.Time.'  FIELD '(end+1)=t;' ])
    end %kt
end %kf

DSI=merge_time_arrays(DSI);

NY=2160;NX=4320;
DSI.Latitude =  90-((1:1:NY)-0.5)'/NY*180;
DSI.Longitude=-180+((1:1:NX)-0.5)'/NX*360;
DSI=DSI_common2(DSI);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function S=htmldirlist(URL,EXT)
% gets the list of files with extension EXT in the directory pointed to by URL

%S=urlread('http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/czcs/global/8_day/netcdf/')
%URL='http://www.marine.csiro.au/dods/nph-dods/dods-data/ocean_colour/czcs/global/8_day/netcdf/'
%EXT='nc'
U=urlread(URL);
S=U;

%<img src="/icons/unknown.gif" alt="[   ]"> 
%<A HREF=czcs_1980_8D_chlor.nc.html>czcs_1980_8D_chlor.nc</a>
%29-May-2007 07:45  409M  
%regexp(S,'html','match')
% match filenames between the leading and trailing strings
SS=regexp(S,[EXT '\.html>.*?\.' EXT '</a>'],'match')';
%[k1,k2]=regexp(S,[EXT '\.html>.*?\.' EXT '</a>'],'start','end');

%cut the the leading and trailing strings 
L1=length([EXT '.html>']);
L2=length(['</a>']);
S=SS;
for k=1:length(S)
S1=SS{k};    
S{k}=S1(L1+1:end-L2);
end
S(:);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [a,p,q]=mergearrays(varargin)
% [a,p,q]=mergearrays(a1,a2,...,aM) 
%           merges two or more (M) integer arrays 
% input:    a1,a2,...,aM arrays to be merged. Each array aj may have different 
%               lengths.
% output:   a(i) merged array containing all possible values in a1,a2,...,aM
%               (without repetition). 
%               The pointers p(i,j) refer to the index in 
%               the original arrays a1,a2,...aM. The pointer is set to zero p(i,j)=0 
%               if the value is not available in the original array aj.
%               The pointer q(i) inicates which array contributed value first
%
% Example:
% a1    =[010;020;030;050;060;070;080;090;100];
% a2    =[030;040;060;070;080;090;100;120];
% a     =[010;020;030;040;050;060;070;080;090;100;120];
% p(:,1)=[  1;  2;  3;  0;  4;  5;  6;  7;  8;  9;  0];
% p(:,2)=[  0;  0;  1;  2;  0;  3;  4;  5;  6;  7;  8];
% q(:)  =[  1;  1;  1;  2;  1;  1;  1;  1;  1;  1;  2];
%
% if M=1 then a=a1 p=[1:length(a1)]'

A=varargin;
M=length(A); % number of arrays to merge 
NA=cellfun(@length,A); % length of each array
N=max(NA); % the length of the longest array 
Na=sum(NA); % the maximum possible length of array a
a=zeros(Na,1)+inf; % allocate memory, initialize values to inf
p=zeros(Na,M);     % allocate memory, initialize pointers to 0
q=zeros(Na,1);     % allocate memory, initialize pointers to 0
% convert the input cell array into matrix; initialize it to inf (because
% we use min) make one extra row 
B=zeros(N+1,M)+inf;
for k=1:M
B(1:NA(k),k)=A{k};
end
kk=ones(1,M); % pointers to the current element in the original array
ka=0;         % pointer to the element of the output array 

L=1;
while L % at least one of kk points to a valid value in aj 
    x=[];
    for k=1:M
        x=[x B(kk(k),k)];
    end    
    [v,i]=min(x);
% starting from the beginning of the arrays find the minimal value    
   %[v,i]=min([B(kk(1),1) B(kk(2),2) B(kk(3),3)]);  
    if ka==0 | v>a(ka)
% if there is nothing in a yet or the minimal value is larger than the last
% in a
        ka=ka+1;
        a(ka)=v; % then add the new value to a
        p(ka,i)=kk(i); % add the pointer to p
        q(ka)=i;       % add the pointer to q
        kk(i)=kk(i)+1; % and increment the pointer kk
    else 
 % otherwise just add the pointer. The same value is present in more than one array 
        p(ka,i)=kk(i); 
        kk(i)=kk(i)+1;
    end
    L=0; 
    for k=1:M
    L=L | kk(k)<=NA(k); % at least one of kk points to a valid value in aj 
    end
end %while
a=a(1:ka); % keep only the valid values, cut out extra memory 
p=p(1:ka,:);
q=q(1:ka,:);

function DSI=merge_time_arrays(DSI)
% In priciple, for each time there should be files corresponding to every field. 
% But some may be missing. Merge time arrays in order to find common time array T 
% for which at least one field is available.
% P contains pointers to elements in the original lists.
% Q containt a pointer to the array that contributed the value 
%[T,P,Q]=mergearrays(DSI.Time.Chlor,DSI.Time.SST,DSI.Time.SST_qual,...)
T=struct2cell(DSI.Time);
[T,P,Q]=mergearrays(T{:});

NT=length(T);
NV=length(DSI.Fields);
for kv=1:NV
FIELD=DSI.Fields{kv};
eval(['F=DSI.URLFILE.' FIELD ';'])
eval(['DSI.URLFILE.' FIELD '=cell(NT,1);'])
    for k=1:NT
        if P(k,kv)>0
eval(['DSI.URLFILE.' FIELD '{k}=F{P(k,kv)};'])
        end
    end
end
DSI.Time=T;
TA=struct2cell(DSI.TimeA);
TB=struct2cell(DSI.TimeB);
DSI.TimeA=zeros(NT,1);
DSI.TimeB=zeros(NT,1);
for k=1:NT
DSI.TimeA(k)=TA{Q(k)}(P(k,Q(k)));
DSI.TimeB(k)=TB{Q(k)}(P(k,Q(k)));        
end

function DSI=DSI_common2(DSI);

for k=1:length(DSI.Fields)
    FIELD=DSI.Fields{k};
eval(['DSI.URLCVAR.' FIELD '=DSI.Fields_NameDS{k};']);
end
% Rename returned variables an
for k=1:length(DSI.Fields)
    FIELD=DSI.Fields{k};
    FREN=['f=squeeze(' DSI.Fields_NameReturned{k} ');'];
eval(['DSI.FormulaRen.' FIELD '=''' FREN ''';']);      
end

CoordinatesTable={
'latitude','latitude','degrees_north';
'longitude','longitude','degrees_east';
%'depth','depth','m';
'time','time','days since 0000-01-01 00:00:00';
};

DSI.Coordinates=CoordinatesTable(:,1);
DSI.Dimensions.latitude=length(DSI.Latitude);
DSI.Dimensions.longitude=length(DSI.Longitude);
%DSI.Dimensions.depth=length(DSI.Depth);
DSI.Dimensions.time=length(DSI.Time);
for k=1:length(DSI.Fields)
    FIELD=DSI.Fields{k};
eval(['DSI.Variables.' FIELD '=DSI.Fields_Coord{k};'])
end
DSI.Variables.latitude={'latitude'};
DSI.Variables.longitude={'longitude'};
%DSI.Variables.depth={'depth'};
DSI.Variables.time={'time'};

for k=1:length(DSI.Fields)
    FIELD=DSI.Fields{k};
eval(['DSI.Attributes.' FIELD '.long_name=DSI.Fields_NameLong{k};']);
eval(['DSI.Attributes.' FIELD '.units    =DSI.Fields_Units{k};']);
end
for k=1:length(DSI.Coordinates)
    COORD=DSI.Coordinates{k};
eval(['DSI.Attributes.' COORD '.long_name=CoordinatesTable{k,2};']);
eval(['DSI.Attributes.' COORD '.units    =CoordinatesTable{k,3};']);
end

%DSI.Range.Time1=min(DSI.TimeA);
%DSI.Range.Time2=max(DSI.TimeB);
DSI.Range.Time1=min(DSI.Time);
DSI.Range.Time2=max(DSI.Time);
DSI.Range.Latitude1=min(DSI.Latitude);
DSI.Range.Latitude2=max(DSI.Latitude);
DSI.Range.Longitude1=min(DSI.Longitude);
DSI.Range.Longitude2=max(DSI.Longitude);

S1=['time in seconds since reference time;'];
S2=['missing values replaced with NaN;'];
S3=['variables converted to physical units.'];
%S4='';%['time is MATLAB datenum.'];
DSI.Readme=[S1 '/' S2 '/' S3];

eval(['DSI_' DSI.DataSetBranch '=DSI;'])
dsi_filename ='dsi_oceancolor.mat';
%if (~isdeployed)
pname = strrep(mfilename('fullpath'),mfilename,'');
dsi_filename = [pname,dsi_filename];
%end
if ~exist(dsi_filename,'file')
save(dsi_filename,['DSI_' DSI.DataSetBranch])
end
save(dsi_filename,['DSI_' DSI.DataSetBranch],'-append')

